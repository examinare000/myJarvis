generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  name            String?
  passwordHash    String?
  role            UserRole        @default(USER)
  emailVerified   DateTime?
  lastLoginAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  tasks           Task[]
  conversations   Conversation[]
  lifelogEntries  LifelogEntry[]
  calendarEvents  CalendarEvent[]
  nlParseLogs     NlParseLog[]
  refreshTokens   RefreshToken[]
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, dueDate])
}

model Conversation {
  id        String   @id @default(cuid())
  messages  Json
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model LifelogEntry {
  id           String   @id @default(cuid())
  userId       String
  content      String   @db.VarChar(280)
  tags         String[]
  mood         String?
  images       String[]
  locationLat  Float?
  locationLng  Float?
  locationName String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("lifelog_entries")
}

model CalendarEvent {
  id             String   @id @default(cuid())
  userId         String
  title          String   @db.VarChar(255)
  description    String?
  startTime      DateTime
  endTime        DateTime
  category       String?  @default("general") @db.VarChar(50)
  color          String?  @default("#1976D2") @db.VarChar(7)
  location       String?  @db.VarChar(255)
  isAllDay       Boolean  @default(false)
  recurrenceRule String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startTime, endTime])
  @@index([category])
  @@map("calendar_events")
}

model NlParseLog {
  id              String   @id @default(cuid())
  userId          String
  inputText       String   @db.Text
  parsedResult    Json?
  confidenceScore Float?
  userAccepted    Boolean?
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("nl_parse_logs")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}
