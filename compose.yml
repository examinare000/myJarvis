services:
  postgres:
    image: postgres:16-alpine
    container_name: myjarvis-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: myjarvis
      POSTGRES_PASSWORD: myjarvis_password
      POSTGRES_DB: myjarvis_db
      TZ: Asia/Tokyo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - myjarvis-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myjarvis -d myjarvis_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  ai-service:
    build: ./ai-service
    container_name: myjarvis-ai
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
    networks:
      - myjarvis-network
    depends_on:
      - postgres

  backend:
    build: ./backend
    container_name: myjarvis-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://myjarvis:myjarvis_password@postgres:5432/myjarvis_db
      AI_SERVICE_URL: http://ai-service:8000
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-jwt-refresh-secret-here-change-in-production}
    networks:
      - myjarvis-network
    depends_on:
      postgres:
        condition: service_healthy
      ai-service:
        condition: service_started
    command: sh -c "npx prisma generate && npm run dev"

  frontend:
    build: ./frontend
    container_name: myjarvis-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:3001}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3001}
    networks:
      - myjarvis-network
    depends_on:
      - backend

volumes:
  postgres_data:
    driver: local

networks:
  myjarvis-network:
    driver: bridge