import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  FormControl,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  CircularProgress,\n  Alert,\n  Chip,\n  LinearProgress,\n  Avatar,\n} from '@mui/material';\nimport {\n  Mood as MoodIcon,\n  TrendingUp as TrendingUpIcon,\n  Psychology as PsychologyIcon,\n  Tag as TagIcon,\n} from '@mui/icons-material';\nimport analyticsService, { MoodAnalytics } from '../../services/analyticsService';\n\nconst MoodDashboard: React.FC = () => {\n  const [timeframe, setTimeframe] = useState<'day' | 'week' | 'month' | 'year'>('week');\n  const [analytics, setAnalytics] = useState<MoodAnalytics | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchAnalytics();\n  }, [timeframe]);\n\n  const fetchAnalytics = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await analyticsService.getMoodAnalytics(timeframe);\n      setAnalytics(data);\n    } catch (error) {\n      setError('ムード分析データの取得に失敗しました');\n      console.error('Mood analytics fetch error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTimeframeChange = (event: SelectChangeEvent<string>) => {\n    setTimeframe(event.target.value as 'day' | 'week' | 'month' | 'year');\n  };\n\n  const getMoodEmoji = (mood: string): string => {\n    const moodMap: Record<string, string> = {\n      'happy': '😊',\n      'excited': '🤩',\n      'content': '😌',\n      'neutral': '😐',\n      'tired': '😴',\n      'stressed': '😰',\n      'sad': '😢',\n      'angry': '😠',\n      'anxious': '😟',\n      'focused': '🎯',\n      'creative': '🎨',\n      'grateful': '🙏',\n    };\n    return moodMap[mood.toLowerCase()] || '😐';\n  };\n\n  const getMoodColor = (mood: string): string => {\n    const colorMap: Record<string, string> = {\n      'happy': '#4caf50',\n      'excited': '#ff9800',\n      'content': '#2196f3',\n      'neutral': '#9e9e9e',\n      'tired': '#795548',\n      'stressed': '#f44336',\n      'sad': '#3f51b5',\n      'angry': '#d32f2f',\n      'anxious': '#ff5722',\n      'focused': '#9c27b0',\n      'creative': '#e91e63',\n      'grateful': '#8bc34a',\n    };\n    return colorMap[mood.toLowerCase()] || '#9e9e9e';\n  };\n\n  const getTimeframeLabel = (tf: string) => {\n    switch (tf) {\n      case 'day': return '過去24時間';\n      case 'week': return '過去7日間';\n      case 'month': return '過去30日間';\n      case 'year': return '過去1年間';\n      default: return tf;\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '400px' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mt: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <Alert severity=\"info\" sx={{ mt: 2 }}>\n        ムード分析データがありません\n      </Alert>\n    );\n  }\n\n  const { overview, charts } = analytics;\n  const maxMoodCount = Math.max(...charts.moodFrequency.map(m => m.count));\n\n  return (\n    <Paper sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          🎭 ムード分析\n        </Typography>\n        <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n          <Select value={timeframe} onChange={handleTimeframeChange}>\n            <MenuItem value=\"day\">過去24時間</MenuItem>\n            <MenuItem value=\"week\">過去7日間</MenuItem>\n            <MenuItem value=\"month\">過去30日間</MenuItem>\n            <MenuItem value=\"year\">過去1年間</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        {getTimeframeLabel(timeframe)}のムード分析結果\n      </Typography>\n\n      {/* Overview Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <MoodIcon color=\"primary\" />\n                <Box>\n                  <Typography variant=\"h4\">{overview.totalEntries}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    ライフログ記録数\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <Avatar sx={{ bgcolor: getMoodColor(overview.dominantMood) }}>\n                  {getMoodEmoji(overview.dominantMood)}\n                </Avatar>\n                <Box>\n                  <Typography variant=\"h6\">{overview.dominantMood}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    主要なムード\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <PsychologyIcon color=\"secondary\" />\n                <Box>\n                  <Typography variant=\"h4\">{overview.moodVariety}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    ムードの種類\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <TrendingUpIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />\n              <Typography variant=\"h6\">\n                ウェルビーイング\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                良好\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Charts */}\n      <Grid container spacing={3}>\n        {/* Mood Frequency */}\n        <Grid item xs={12} lg={6}>\n          <Paper sx={{ p: 2, minHeight: 300 }}>\n            <Typography variant=\"h6\" gutterBottom>ムード頻度分析</Typography>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1.5 }}>\n              {charts.moodFrequency\n                .sort((a, b) => b.count - a.count)\n                .map((mood, index) => (\n                  <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                    <Avatar\n                      sx={{\n                        width: 32,\n                        height: 32,\n                        bgcolor: getMoodColor(mood.mood),\n                        fontSize: '1rem',\n                      }}\n                    >\n                      {getMoodEmoji(mood.mood)}\n                    </Avatar>\n                    <Typography variant=\"body2\" sx={{ minWidth: 80, fontSize: '0.9rem' }}>\n                      {mood.mood}\n                    </Typography>\n                    <Box sx={{ flexGrow: 1, position: 'relative' }}>\n                      <LinearProgress\n                        variant=\"determinate\"\n                        value={(mood.count / maxMoodCount) * 100}\n                        sx={{\n                          height: 16,\n                          borderRadius: 2,\n                          backgroundColor: 'grey.200',\n                          '& .MuiLinearProgress-bar': {\n                            backgroundColor: getMoodColor(mood.mood),\n                            borderRadius: 2,\n                          },\n                        }}\n                      />\n                      <Typography\n                        variant=\"caption\"\n                        sx={{\n                          position: 'absolute',\n                          right: 4,\n                          top: '50%',\n                          transform: 'translateY(-50%)',\n                          color: 'white',\n                          fontWeight: 'bold',\n                          textShadow: '1px 1px 2px rgba(0,0,0,0.7)',\n                          fontSize: '0.7rem',\n                        }}\n                      >\n                        {mood.count}\n                      </Typography>\n                    </Box>\n                  </Box>\n                ))}\n            </Box>\n          </Paper>\n        </Grid>\n\n        {/* Mood Tags Context */}\n        <Grid item xs={12} lg={6}>\n          <Paper sx={{ p: 2, minHeight: 300 }}>\n            <Typography variant=\"h6\" gutterBottom>ムード別タグ分析</Typography>\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n              {charts.moodTagsContext.slice(0, 6).map((moodContext, index) => (\n                <Box key={index}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                    <Avatar\n                      sx={{\n                        width: 24,\n                        height: 24,\n                        bgcolor: getMoodColor(moodContext.mood),\n                        fontSize: '0.8rem',\n                      }}\n                    >\n                      {getMoodEmoji(moodContext.mood)}\n                    </Avatar>\n                    <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                      {moodContext.mood}\n                    </Typography>\n                  </Box>\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                    {moodContext.topTags.slice(0, 4).map((tag, tagIndex) => (\n                      <Chip\n                        key={tagIndex}\n                        label={`${tag.tag} (${tag.count})`}\n                        size=\"small\"\n                        icon={<TagIcon />}\n                        sx={{\n                          fontSize: '0.7rem',\n                          height: 20,\n                          backgroundColor: getMoodColor(moodContext.mood),\n                          color: 'white',\n                          '& .MuiChip-icon': {\n                            color: 'white',\n                            fontSize: '0.8rem',\n                          },\n                        }}\n                      />\n                    ))}\n                  </Box>\n                </Box>\n              ))}\n            </Box>\n          </Paper>\n        </Grid>\n\n        {/* Recent Mood Trend */}\n        <Grid item xs={12}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>最近のムード推移</Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n              {charts.moodByDay.slice(-7).map((day, index) => (\n                <Card key={index} sx={{ minWidth: 120, p: 1 }}>\n                  <Typography variant=\"caption\" sx={{ fontWeight: 'bold' }}>\n                    {new Date(day.date).getMonth() + 1}/{new Date(day.date).getDate()}\n                  </Typography>\n                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>\n                    {day.moods.slice(0, 3).map((mood, moodIndex) => (\n                      <Chip\n                        key={moodIndex}\n                        label={`${getMoodEmoji(mood.mood)} ${mood.count}`}\n                        size=\"small\"\n                        sx={{\n                          fontSize: '0.65rem',\n                          height: 18,\n                          backgroundColor: getMoodColor(mood.mood),\n                          color: 'white',\n                        }}\n                      />\n                    ))}\n                  </Box>\n                </Card>\n              ))}\n            </Box>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default MoodDashboard;