import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  FormControl,\n  Select,\n  MenuItem,\n  SelectChangeEvent,\n  CircularProgress,\n  Alert,\n  Chip,\n  LinearProgress,\n} from '@mui/material';\nimport {\n  TrendingUp as TrendingUpIcon,\n  Assignment as TaskIcon,\n  CheckCircle as CompletedIcon,\n  Schedule as PendingIcon,\n  Warning as OverdueIcon,\n} from '@mui/icons-material';\nimport analyticsService, { ProductivityAnalytics } from '../../services/analyticsService';\n\n// Simple chart components using CSS and div elements\nconst SimpleBarChart: React.FC<{\n  data: Array<{ label: string; value: number; color?: string }>;\n  title: string;\n}> = ({ data, title }) => {\n  const maxValue = Math.max(...data.map(d => d.value));\n\n  return (\n    <Box sx={{ p: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n        {data.map((item, index) => (\n          <Box key={index} sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n            <Typography variant=\"body2\" sx={{ minWidth: 80, fontSize: '0.8rem' }}>\n              {item.label}\n            </Typography>\n            <Box sx={{ flexGrow: 1, position: 'relative' }}>\n              <LinearProgress\n                variant=\"determinate\"\n                value={(item.value / maxValue) * 100}\n                sx={{\n                  height: 20,\n                  borderRadius: 2,\n                  backgroundColor: 'grey.200',\n                  '& .MuiLinearProgress-bar': {\n                    backgroundColor: item.color || 'primary.main',\n                    borderRadius: 2,\n                  },\n                }}\n              />\n              <Typography\n                variant=\"caption\"\n                sx={{\n                  position: 'absolute',\n                  right: 8,\n                  top: '50%',\n                  transform: 'translateY(-50%)',\n                  color: 'white',\n                  fontWeight: 'bold',\n                  textShadow: '1px 1px 2px rgba(0,0,0,0.7)',\n                }}\n              >\n                {item.value}\n              </Typography>\n            </Box>\n          </Box>\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nconst SimplePieChart: React.FC<{\n  data: Array<{ label: string; value: number; color: string }>;\n  title: string;\n}> = ({ data, title }) => {\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n\n  return (\n    <Box sx={{ p: 2 }}>\n      <Typography variant=\"h6\" gutterBottom>{title}</Typography>\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, justifyContent: 'center' }}>\n        {data.map((item, index) => (\n          <Chip\n            key={index}\n            label={`${item.label}: ${item.value} (${Math.round((item.value / total) * 100)}%)`}\n            sx={{\n              backgroundColor: item.color,\n              color: 'white',\n              fontWeight: 'bold',\n              '& .MuiChip-label': {\n                fontSize: '0.75rem',\n              },\n            }}\n          />\n        ))}\n      </Box>\n      <Box sx={{ mt: 2, textAlign: 'center' }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          Total: {total}\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nconst ProductivityDashboard: React.FC = () => {\n  const [timeframe, setTimeframe] = useState<'day' | 'week' | 'month' | 'year'>('week');\n  const [analytics, setAnalytics] = useState<ProductivityAnalytics | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchAnalytics();\n  }, [timeframe]);\n\n  const fetchAnalytics = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const data = await analyticsService.getProductivityAnalytics(timeframe);\n      setAnalytics(data);\n    } catch (error) {\n      setError('分析データの取得に失敗しました');\n      console.error('Analytics fetch error:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTimeframeChange = (event: SelectChangeEvent<string>) => {\n    setTimeframe(event.target.value as 'day' | 'week' | 'month' | 'year');\n  };\n\n  const getTimeframeLabel = (tf: string) => {\n    switch (tf) {\n      case 'day': return '過去24時間';\n      case 'week': return '過去7日間';\n      case 'month': return '過去30日間';\n      case 'year': return '過去1年間';\n      default: return tf;\n    }\n  };\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    if (timeframe === 'day') {\n      return date.getHours().toString().padStart(2, '0') + ':00';\n    }\n    return `${date.getMonth() + 1}/${date.getDate()}`;\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '400px' }}>\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" sx={{ mt: 2 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  if (!analytics) {\n    return (\n      <Alert severity=\"info\" sx={{ mt: 2 }}>\n        分析データがありません\n      </Alert>\n    );\n  }\n\n  const { overview, charts } = analytics;\n\n  // Prepare chart data\n  const tasksByDayData = charts.tasksByDay.map(day => ({\n    label: formatDate(day.date),\n    value: day.total,\n    color: '#1976d2',\n  }));\n\n  const priorityData = charts.priorityDistribution.map(item => {\n    const colors: Record<string, string> = {\n      'HIGH': '#f44336',\n      'MEDIUM': '#ff9800',\n      'LOW': '#4caf50',\n    };\n    return {\n      label: item.priority,\n      value: item.count,\n      color: colors[item.priority] || '#9e9e9e',\n    };\n  });\n\n  const statusData = charts.statusDistribution.map(item => {\n    const colors: Record<string, string> = {\n      'DONE': '#4caf50',\n      'IN_PROGRESS': '#ff9800',\n      'TODO': '#9e9e9e',\n    };\n    const labels: Record<string, string> = {\n      'DONE': '完了',\n      'IN_PROGRESS': '進行中',\n      'TODO': '未着手',\n    };\n    return {\n      label: labels[item.status] || item.status,\n      value: item.count,\n      color: colors[item.status] || '#9e9e9e',\n    };\n  });\n\n  return (\n    <Paper sx={{ p: 3 }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\">\n          📊 生産性分析\n        </Typography>\n        <FormControl size=\"small\" sx={{ minWidth: 120 }}>\n          <Select value={timeframe} onChange={handleTimeframeChange}>\n            <MenuItem value=\"day\">過去24時間</MenuItem>\n            <MenuItem value=\"week\">過去7日間</MenuItem>\n            <MenuItem value=\"month\">過去30日間</MenuItem>\n            <MenuItem value=\"year\">過去1年間</MenuItem>\n          </Select>\n        </FormControl>\n      </Box>\n\n      <Typography variant=\"subtitle1\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        {getTimeframeLabel(timeframe)}の分析結果\n      </Typography>\n\n      {/* Overview Cards */}\n      <Grid container spacing={3} sx={{ mb: 4 }}>\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <TaskIcon color=\"primary\" />\n                <Box>\n                  <Typography variant=\"h4\">{overview.totalTasks}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    総タスク数\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <CompletedIcon color=\"success\" />\n                <Box>\n                  <Typography variant=\"h4\">{overview.completionRate}%</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    完了率\n                  </Typography>\n                </Box>\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={overview.completionRate}\n                sx={{ mt: 1, height: 6, borderRadius: 3 }}\n                color=\"success\"\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <PendingIcon color=\"warning\" />\n                <Box>\n                  <Typography variant=\"h4\">{overview.avgCompletionTimeHours.toFixed(1)}h</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    平均完了時間\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n                <OverdueIcon color=\"error\" />\n                <Box>\n                  <Typography variant=\"h4\">{overview.overdueTasks}</Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    期限超過\n                  </Typography>\n                </Box>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n\n      {/* Charts */}\n      <Grid container spacing={3}>\n        <Grid item xs={12} lg={6}>\n          <Paper sx={{ minHeight: 300 }}>\n            <SimpleBarChart\n              data={tasksByDayData}\n              title=\"日別タスク数推移\"\n            />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} lg={6}>\n          <Paper sx={{ minHeight: 300 }}>\n            <SimplePieChart\n              data={statusData}\n              title=\"ステータス別タスク分布\"\n            />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} lg={6}>\n          <Paper sx={{ minHeight: 300 }}>\n            <SimplePieChart\n              data={priorityData}\n              title=\"優先度別タスク分布\"\n            />\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} lg={6}>\n          <Card sx={{ minHeight: 300, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n            <CardContent sx={{ textAlign: 'center' }}>\n              <TrendingUpIcon sx={{ fontSize: 60, color: 'primary.main', mb: 2 }} />\n              <Typography variant=\"h6\" gutterBottom>\n                生産性スコア\n              </Typography>\n              <Typography variant=\"h3\" color=\"primary.main\">\n                {overview.completionRate}\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                完了率ベースのスコア\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default ProductivityDashboard;